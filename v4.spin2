'Raycast turned from pure assembly to Spin+asm and with USB keyboard control
'Rev.2a:  Modified USB and VGA settings for Rev.B P2
'Tested on Eval board with VGA on P0+ and USB on P16+

CON  'Clock settings
  _XTALFREQ     = 20_000_000                                    ' crystal frequency
  _XDIV         = 2'10                                            ' crystal divider to give 1MHz
  _XMUL         = 25'125                                          ' crystal / div * mul
  _XDIVP        = 1                                             ' crystal / div * mul /divp to give _CLKFREQ (1,2,4..30)
  _XOSC         = %10                                  'OSC    ' %00=OFF, %01=OSC, %10=15pF, %11=30pF
  _XSEL         = %11                                   'XI+PLL ' %00=rcfast(20+MHz), %01=rcslow(~20KHz), %10=XI(5ms), %11=XI+PLL(10ms)
  _XPPPP        = ((_XDIVP>>1) + 15) & $F                       ' 1->15, 2->0, 4->1, 6->2...30->14
  _CLOCKFREQ    = _XTALFREQ / _XDIV * _XMUL / _XDIVP            ' internal clock frequency                
  _SETFREQ      = 1<<24 + (_XDIV-1)<<18 + (_XMUL-1)<<8 + _XPPPP<<4 + _XOSC<<2  ' %0000_000e_dddddd_mmmmmmmmmm_pppp_cc_00  ' setup  oscillator
  _ENAFREQ      = _SETFREQ + _XSEL 

  _clkmode = _SETFREQ
  _clkfreq = 250_000_000

    WIDTH       = 320
    HEIGHT      = 240
    BUFFSZ      = WIDTH * HEIGHT

    RX_PIN      = 63
    TX_PIN      = 62
    SER_BAUD    = 2_000_000

    VGA_BASEPIN = 0

VAR

    byte    _framebuffer[BUFFSZ]
    long    _palette[256]
    long    PaletteBmpAddress
  
OBJ
    ser:    "com.serial.terminal.ansi"
    VGA:    "display.vga4"
    time:   "time"

PUB Main | tmp, c
    'First, set the clock
    clkset(_clkmode, _clkfreq)
'    waitcnt(clkfreq + cnt)
 
    Pal   
    'Start up the serial output cog
    ser.startrxtx(rx_pin, tx_pin, 0, ser_baud)
    ser.clear
    ser.printf("serial started - p2 @ %dMHz\n", clkfreq/1000000)
    'Start up the game
    
    'Start up the VGA display (has to be last as only works in cog#0 for now)
    VGA.start(@_framebuffer, VGA_BASEPIN, @_palette)

    bytefill(@_framebuffer, 0, BUFFSZ)
    tmp := c := 0
    repeat $12C00
        ser.position(0, 5)
        ser.printf("fbpos = %d", tmp)
        _framebuffer[tmp++] := c
        c++
        if c>255
            c := 0

PUB Pal | i, r, g, b, c
' Set up palette
    r := 0
    g := 0
    b := 0

    repeat i from 0 to 255
        c := 0 | (r << 16) | (g << 8) | b
        _palette[i] := c

        case i
            0..63:
                r += 4
                g := 0
                b := 0
            64..127:
                r := 0
                g += 4
                b := 0
            128..191:
                r := 0
                g := 0
                b += 4
            192..255:
                r += 4
                g += 4
                b :=0

