{
    --------------------------------------------
    Filename: VGABitmap8BPP-Demo.spin2
    Description: Demo of the 8bpp VGA bitmap driver
    Author: Jesse Burt
    Copyright (c) 2022
    Started: Apr 6, 2020
    Updated: Oct 16, 2022
    See end of file for terms of use.
    --------------------------------------------
}
CON

    _clkfreq        = cfg._clkfreq_def
    _xtlfreq        = cfg._xtlfreq

' -- User-modifiable constants
    SER_BAUD        = 2_000_000
    LED             = cfg.LED1

    VGA_BASEPIN     = 48                                     ' 0, 8, 16, 24, 32, 40, 48
'                                                           Works with all basepins on the P2ES except 56
' --
    WIDTH           = 320
    HEIGHT          = 240
    XMAX            = WIDTH-1
    YMAX            = HEIGHT-1
    BUFFSZ          = WIDTH * HEIGHT
    BPP             = 1
    BPL             = WIDTH * BPP

VAR

    long _stack_timer[50]
    long _timer_set
    byte _disp_buff[BUFFSZ]
    byte _timer_cog

OBJ

    cfg : "boardcfg.p2eval"
    ser : "com.serial.terminal.ansi"
    vga : "display.vga.bitmap-8bpp"
    fnt : "font.5x8"
    math: "math.int"

PUB main() | time_ms

    vga.set_timings(10, 33, 16, 96, 48, 640)
    setup()
    vga.clear()

    demo_greet()
    waitms(5_000)
    vga.clear()

    time_ms := 5_000

    ser.position(0, 3)
    demo_shadebobs(time_ms)

    demo_sinewave(time_ms)
    vga.clear()

    demo_triwave(time_ms)
    vga.clear()

    demo_memscroller(time_ms, $0000, $7_FFFF)
    vga.clear()

    demo_bitmap(time_ms, $1_0000)
    vga.clear()

    demo_box(time_ms)
    vga.clear()

    demo_boxfilled(time_ms)
    vga.clear()

    demo_linesweepx(time_ms)
    vga.clear()

    demo_linesweepy(time_ms)
    vga.clear()

    demo_line(time_ms)
    vga.clear()

    demo_plot(time_ms)
    vga.clear()

    demo_bouncingball(time_ms, 5)
    vga.clear()

    demo_circle(time_ms)
    vga.clear()

    demo_wander(time_ms)
    vga.clear()

    demo_seqtext(time_ms)
    vga.clear()

    demo_rndtext(time_ms)

    waitms(2000)
    vga.clear()
    repeat

PUB Demo_BouncingBall(testtime, radius) | iteration, bx, by, dx, dy
' Draws a simple ball bouncing off screen edges
    bx := (math.rndi(XMAX) // (WIDTH - radius * 4)) + radius * 2  'Pick a random screen location to
    by := (math.rndi(YMAX) // (HEIGHT - radius * 4)) + radius * 2 ' start from
    dx := math.rndi(4) // 2 * 2 - 1                               'Pick a random direction to
    dy := math.rndi(4) // 2 * 2 - 1                               ' start moving

    ser.str(@"Demo_BouncingBall - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        bx += dx
        by += dy
        if (by <= radius OR by >= YMAX - radius)          'If we reach the top or bottom of the screen,
            dy *= -1                                        ' change direction
        if (bx <= radius OR bx >= XMAX - radius)           'Ditto with the left or right sides
            dx *= -1

        vga.circle(bx, by, radius, vga#MAX_COLOR, false)
        vga.wait_vsync()
        iteration++
        vga.clear()

    report(testtime, iteration)

PUB Demo_Bitmap(testtime, bitmap_addr) | iteration
' Continuously redraws bitmap at address bitmap_addr
    ser.str(@"Demo_Bitmap - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        vga.bitmap(bitmap_addr, 0, 0, XMAX, YMAX)
        iteration++

    report(testtime, iteration)

PUB Demo_Box(testtime) | iteration, c
' Draws random boxes
    ser.str(@"Demo_Box - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        c := math.rndi(vga.MAX_COLOR)
        vga.box(math.rndi(XMAX), math.rndi(YMAX), math.rndi(XMAX), math.rndi(YMAX), c, FALSE)
        iteration++

    report(testtime, iteration)

PUB Demo_BoxFilled(testtime) | iteration, c
' Draws random filled boxes
    ser.str(@"Demo_BoxFilled - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        c := math.rndi(vga.MAX_COLOR)
        vga.box(math.rndi(XMAX), math.rndi(YMAX), math.rndi(XMAX), math.rndi(YMAX), c, TRUE)
        iteration++

    report(testtime, iteration)

PUB Demo_Circle(testtime) | iteration, x, y, r, c
' Draws circles at random locations
    ser.str(@"Demo_Circle - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        x := math.rndi(XMAX)
        y := math.rndi(YMAX)
        r := math.rndi(YMAX/2)
        c := math.rndi(vga.MAX_COLOR)
        vga.circle(x, y, r, c, false)
        iteration++

    report(testtime, iteration)

PUB Demo_Greet()
' Display the banner/greeting
    vga.fgcolor(vga.MAX_COLOR)
    vga.bgcolor(0)
    vga.position(0, 1)
    vga.printf("VGA 8bpp on the Parallax P2X8C4M64P @ %dMHz\n", clkfreq/1_000_000)
    vga.printf("%dx%d", WIDTH, HEIGHT)

PUB Demo_Line(testtime) | iteration, c
' Draws random lines
    ser.printf("Demo_Line - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        c := math.rndi(vga.MAX_COLOR)
        vga.line(math.rndi(XMAX), math.rndi(YMAX), math.rndi(XMAX), math.rndi(YMAX), c)
        iteration++

    report(testtime, iteration)

PUB Demo_LineSweepX(testtime) | iteration, x, c
' Draws lines sweeping from left-right to the opposite diagonal direction
    x := 0

    ser.printf("Demo_LineSweepX - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        x++
        if x > XMAX
            x := 0
        c++
        if c > vga.MAX_COLOR
            c := 0
        vga.line(x, 0, XMAX-x, YMAX, c)
        iteration++

    report(testtime, iteration)

PUB Demo_LineSweepY(testtime) | iteration, y, c
' Draws lines sweeping from top-down to the opposite diagonal direction
    y := 0

    ser.printf("Demo_LineSweepY - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        y++
        if y > YMAX
            y := 0
        c++
        if c > vga.MAX_COLOR
            c := 0
        vga.line(XMAX, y, 0, YMAX-y, c)
        iteration++

    report(testtime, iteration)

PUB Demo_MEMScroller(testtime, start_addr, end_addr) | iteration, pos, st, en
' Dumps Propeller Hub RAM (and/or ROM) to the display buffer
    pos := start_addr

    ser.printf("Demo_MEMScroller - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        pos += BPL
        if pos > end_addr
            pos := start_addr
        vga.bitmap(pos, 0, 0, XMAX, YMAX)
        iteration++

    report(testtime, iteration)

PUB Demo_Plot(testtime) | iteration, x, y, c
' Draws random pixels to the screen
    ser.printf("Demo_Plot - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        c := math.rndi(vga.MAX_COLOR)
        vga.plot(math.rndi(XMAX), math.rndi(YMAX), c)
        iteration++

    report(testtime, iteration)

PUB Demo_Shadebobs(testtime) | iteration, x, y, xs, ys, p, offset, div, modifier
' Draws Shadebobs along a sine-wave
    ser.printf("Demo_Shadebobs - ")

    div := 1024
    offset := YMAX/2

    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        repeat x from 0 to XMAX
            modifier := (abs(getct()) / 1_000_000)
            y := offset + math.sin(x * modifier) / div
            repeat ys from y to y+10
                repeat xs from x to x+10
                    p := vga.point(xs, ys) + 1
                    if p > vga.MAX_COLOR
                        p := 0
                    vga.plot(xs, ys, p)
        iteration++

    report(testtime, iteration)

PUB Demo_Sinewave(testtime) | iteration, x, y, modifier, offset, div
' Draws a sine wave the length of the screen, influenced by the system counter
    ser.printf("Demo_Sinewave - ")

    div := 1024
    offset := YMAX/2                                    ' Offset for Y axis

    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        repeat x from 0 to XMAX
            modifier := (abs(getct()) / 1_000_000)           ' Use system counter as modifier
            y := offset + math.sin(x * modifier) / div
            vga.plot(x, y, vga.MAX_COLOR)

        vga.wait_vsync()
        iteration++
        vga.clear()

    report(testtime, iteration)

PUB Demo_SeqText(testtime) | iteration, col, row, ch, fg, bg
' Sequentially draws the whole font table to the screen
    ch := $20
    ser.printf("Demo_SeqText - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        ch++
        if ch > $7F
            ch := $20
        fg++
        if fg > vga.MAX_COLOR
            fg := 0
        bg--
        if bg < 0
            bg := vga.MAX_COLOR
        vga.fgcolor(fg)
        vga.bgcolor(bg)
        vga.char(ch)
        iteration++

    report(testtime, iteration)

PUB Demo_RndText(testtime) | iteration, col, row, fg, bg
' Draws random characters to the screen
    ser.printf("Demo_RndText - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        fg++
        if fg > vga.MAX_COLOR
            fg := 0
        bg--
        if bg < 0
            bg := vga.MAX_COLOR
        vga.fgcolor(fg)
        vga.bgcolor(bg)
        vga.char(32 #> math.rndi(127))
        iteration++

    report(testtime, iteration)

PUB Demo_TriWave(testtime) | iteration, x, y, ydir
' Draws a simple triangular wave
    ydir := 1
    y := 0

    ser.printf("Demo_TriWave - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        repeat x from 0 to XMAX
            if y == YMAX
                ydir := -1
            if y == 0
                ydir := 1
            y := y + ydir
            vga.plot(x, y, vga.MAX_COLOR)
        vga.wait_vsync()
        vga.clear()
        iteration++

    report(testtime, iteration)

PUB Demo_Wander(testtime) | iteration, x, y, d, c, movestep
' Draws randomly wandering pixels
    x := XMAX/2
    y := YMAX/2
    movestep := 2

    ser.printf("Demo_Wander - ")
    _timer_set := testtime
    iteration := 0

    repeat while _timer_set
        case d := math.rndi(4)
            1:
                x += movestep
                if x > XMAX
                    x := 0
            2:
                x -= movestep
                if x < 0
                    x := XMAX
            3:
                y += movestep
                if y > YMAX
                    y := 0
            4:
                y -= movestep
                if y < 0
                    y := YMAX
        c := math.rndi(vga.MAX_COLOR)
        vga.plot(x, y, c)
        iteration++

    report(testtime, iteration)

PRI Report(testtime, iterations) | msec
' Display performance results
    msec := (testtime * 1_000) / iterations
    ser.printf(@"Total iterations: %d, iterations/sec: %d, ms/iteration: %d.%03.3d", {
}    iterations, iterations / (testtime/1000), (msec/1000), (msec//1000))
    ser.newline()

PRI cog_Timer() | time_left

    repeat
        repeat until _timer_set
        time_left := _timer_set

        repeat
            time_left--
            waitms(1)
        while time_left > 0
        _timer_set := 0

PRI Setup()

    ser.start(SER_BAUD)
    ser.clear()
    ser.printf("Serial terminal started - p2 @ %dMHz\n\r", clkfreq/1000000)
    setuppalette()

    vga.start(VGA_BASEPIN, WIDTH, HEIGHT, @_disp_buff)
    ser.printf("VGA 8bpp driver started\n\r")
    vga.fontaddress(fnt.ptr())
    vga.fontscale(1)
    vga.fontspacing(1, 0)
    vga.fontsize(fnt.WIDTH, fnt.HEIGHT)
    vga.clear()

    _timer_cog := cogspin(16, cog_timer(), @_stack_timer)

PRI SetupPalette() | i, r, g, b, c, ptr_pal
' Set up palette
    r := 0
    g := 0
    b := 0
    ptr_pal := vga.palette_ptr()
    repeat i from 0 to vga.MAX_COLOR
        c := 0 | (r << 16) | (g << 8) | b
        long[ptr_pal][i] := c

        case i
            0..63:
                r += 4
                g := 0
                b := 0
            64..127:
                r := 0
                g += 4
                b := 0
            128..191:
                r := 0
                g := 0
                b += 4
            192..253:
                r += 4
                g += 4
                b := 0
            254..255:
                r := 255
                g := 255
                b := 255

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

